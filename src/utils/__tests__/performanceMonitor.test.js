import performanceMonitor, { 
  startPerformanceMonitoring, 
  stopPerformanceMonitoring, 
  getPerformanceMetrics,
  measureCustomMetric,
  measureComponentRender,
  generatePerformanceReport
} from '../performanceMonitor';

// Mock web-vitals
jest.mock('web-vitals', () => ({
  onCLS: jest.fn((callback) => setTimeout(() => callback({ name: 'CLS', value: 0.05 }), 100)),
  onINP: jest.fn((callback) => setTimeout(() => callback({ name: 'INP', value: 150 }), 100)),
  onFCP: jest.fn((callback) => setTimeout(() => callback({ name: 'FCP', value: 1200 }), 100)),
  onLCP: jest.fn((callback) => setTimeout(() => callback({ name: 'LCP', value: 2000 }), 100)),
  onTTFB: jest.fn((callback) => setTimeout(() => callback({ name: 'TTFB', value: 600 }), 100))
}));

// Mock PerformanceObserver
global.PerformanceObserver = jest.fn().mockImplementation((callback) => ({
  observe: jest.fn(),
  disconnect: jest.fn()
}));

// Mock performance.now
const mockPerformanceNow = jest.fn(() => Date.now());
global.performance = {
  ...global.performance,
  now: mockPerformanceNow,
  memory: {
    usedJSHeapSize: 50 * 1024 * 1024,
    totalJSHeapSize: 100 * 1024 * 1024,
    jsHeapSizeLimit: 2048 * 1024 * 1024
  }
};

// Mock console methods
const originalConsole = global.console;
beforeEach(() => {
  global.console = {
    ...originalConsole,
    log: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
    group: jest.fn(),
    groupEnd: jest.fn()
  };
});

afterEach(() => {
  global.console = originalConsole;
  performanceMonitor.stop();
  jest.clearAllMocks();
  mockPerformanceNow.mockClear();
});

describe('PerformanceMonitor', () => {
  describe('Ïã±Í∏ÄÌÜ§ Ìå®ÌÑ¥', () => {
    test('ÎèôÏùºÌïú Ïù∏Ïä§ÌÑ¥Ïä§Î•º Î∞òÌôòÌï¥Ïïº Ìï®', () => {
      const monitor1 = performanceMonitor;
      const monitor2 = performanceMonitor;
      expect(monitor1).toBe(monitor2);
    });
  });

  describe('Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë/Ï§ëÏßÄ', () => {
    test('start Î©îÏÑúÎìúÍ∞Ä Î™®ÎãàÌÑ∞ÎßÅÏùÑ ÏãúÏûëÌï¥Ïïº Ìï®', () => {
      expect(performanceMonitor.isMonitoring).toBe(false);
      
      performanceMonitor.start();
      
      expect(performanceMonitor.isMonitoring).toBe(true);
      expect(console.log).toHaveBeenCalledWith('‚úÖ Performance monitoring started');
    });

    test('Ïù¥ÎØ∏ Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏùº Îïå Í≤ΩÍ≥† Î©îÏãúÏßÄ ÌëúÏãú', () => {
      performanceMonitor.start();
      performanceMonitor.start(); // Îëê Î≤àÏß∏ Ìò∏Ï∂ú
      
      expect(console.warn).toHaveBeenCalledWith('Performance monitoring is already active');
    });

    test('stop Î©îÏÑúÎìúÍ∞Ä Î™®ÎãàÌÑ∞ÎßÅÏùÑ Ï§ëÏßÄÌï¥Ïïº Ìï®', () => {
      performanceMonitor.start();
      performanceMonitor.stop();
      
      expect(performanceMonitor.isMonitoring).toBe(false);
      expect(console.log).toHaveBeenCalledWith('üõë Performance monitoring stopped');
    });

    test('Î™®ÎãàÌÑ∞ÎßÅÏù¥ ÏãúÏûëÎêòÏßÄ ÏïäÏùÄ ÏÉÅÌÉúÏóêÏÑú stop Ìò∏Ï∂úÌï¥ÎèÑ Ïò§Î•ò ÏóÜÏùå', () => {
      expect(() => {
        performanceMonitor.stop();
      }).not.toThrow();
    });
  });

  describe('Named exports', () => {
    test('startPerformanceMonitoringÏù¥ Ïò¨Î∞îÎ•¥Í≤å ÎèôÏûëÌï¥Ïïº Ìï®', () => {
      expect(typeof startPerformanceMonitoring).toBe('function');
      startPerformanceMonitoring();
      expect(performanceMonitor.isMonitoring).toBe(true);
    });

    test('stopPerformanceMonitoringÏù¥ Ïò¨Î∞îÎ•¥Í≤å ÎèôÏûëÌï¥Ïïº Ìï®', () => {
      startPerformanceMonitoring();
      stopPerformanceMonitoring();
      expect(performanceMonitor.isMonitoring).toBe(false);
    });

    test('getPerformanceMetricsÍ∞Ä Î©îÌä∏Î¶≠ÏùÑ Î∞òÌôòÌï¥Ïïº Ìï®', () => {
      const metrics = getPerformanceMetrics();
      expect(typeof metrics).toBe('object');
      expect(metrics).toHaveProperty('CLS');
      expect(metrics).toHaveProperty('INP');
      expect(metrics).toHaveProperty('FCP');
      expect(metrics).toHaveProperty('LCP');
      expect(metrics).toHaveProperty('TTFB');
    });
  });

  describe('Î©îÌä∏Î¶≠ Ï∏°Ï†ï', () => {
    test('onMetricUpdateÍ∞Ä Î©îÌä∏Î¶≠ÏùÑ ÏóÖÎç∞Ïù¥Ìä∏Ìï¥Ïïº Ìï®', async () => {
      performanceMonitor.start();
      
      const testMetric = { name: 'CLS', value: 0.05 };
      performanceMonitor.onMetricUpdate(testMetric);
      
      const metrics = performanceMonitor.getMetrics();
      expect(metrics.CLS).toBe(0.05);
    });

    test('Î©îÌä∏Î¶≠ ÏóÖÎç∞Ïù¥Ìä∏ Ïãú ÏΩòÏÜî Î°úÍ∑∏ Ï∂úÎ†•', () => {
      const testMetric = { name: 'FCP', value: 1500 };
      performanceMonitor.onMetricUpdate(testMetric);
      
      expect(console.log).toHaveBeenCalledWith('üìä FCP: 1500ms');
    });

    test('ÏÑ±Îä• ÏûÑÍ≥ÑÍ∞í ÌôïÏù∏ - Good', () => {
      const goodMetric = { name: 'CLS', value: 0.05 };
      performanceMonitor.onMetricUpdate(goodMetric);
      
      expect(console.log).toHaveBeenCalledWith('CLS Status: ‚úÖ Good');
    });

    test('ÏÑ±Îä• ÏûÑÍ≥ÑÍ∞í ÌôïÏù∏ - Poor', () => {
      const poorMetric = { name: 'CLS', value: 0.3 };
      performanceMonitor.onMetricUpdate(poorMetric);
      
      expect(console.log).toHaveBeenCalledWith('CLS Status: ‚ùå Poor');
      expect(console.group).toHaveBeenCalledWith('üö® CLS ÏÑ±Îä• Í∞úÏÑ† ÌïÑÏöî');
    });

    test('Î©îÌä∏Î¶≠ Îã®ÏúÑÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å Î∞òÌôòÎêòÏñ¥Ïïº Ìï®', () => {
      expect(performanceMonitor.getMetricUnit('CLS')).toBe('');
      expect(performanceMonitor.getMetricUnit('INP')).toBe('ms');
      expect(performanceMonitor.getMetricUnit('FCP')).toBe('ms');
      expect(performanceMonitor.getMetricUnit('LCP')).toBe('ms');
      expect(performanceMonitor.getMetricUnit('TTFB')).toBe('ms');
    });
  });

  describe('Ïª§Ïä§ÌÖÄ Î©îÌä∏Î¶≠ Ï∏°Ï†ï', () => {
    test('measureCustomMetricÏù¥ Ïò¨Î∞îÎ•∏ durationÏùÑ Î∞òÌôòÌï¥Ïïº Ìï®', () => {
      const startTime = 1000;
      const endTime = 1500;
      
      const duration = measureCustomMetric('test-metric', startTime, endTime);
      
      expect(duration).toBe(500);
      expect(console.log).toHaveBeenCalledWith('‚è±Ô∏è Custom Metric [test-metric]: 500ms');
    });

    test('measureCustomMetric ÏûòÎ™ªÎêú ÏãúÍ∞Ñ Í∞í Ï≤òÎ¶¨', () => {
      const result = measureCustomMetric('test-metric', null, 1000);
      
      expect(result).toBeUndefined();
      expect(console.error).toHaveBeenCalledWith('Invalid time values for custom metric');
    });
  });

  describe('Ïª¥Ìè¨ÎÑåÌä∏ Î†åÎçîÎßÅ Ï∏°Ï†ï', () => {
    test('measureComponentRenderÍ∞Ä Ï∏°Ï†ï Í∞ùÏ≤¥Î•º Î∞òÌôòÌï¥Ïïº Ìï®', () => {
      const measurement = measureComponentRender('TestComponent');
      expect(typeof measurement.end).toBe('function');
      
      const duration = measurement.end();
      expect(typeof duration).toBe('number');
      expect(duration).toBeGreaterThanOrEqual(0);
    });

    test('ÎäêÎ¶∞ Ïª¥Ìè¨ÎÑåÌä∏ Î†åÎçîÎßÅ Ïãú Í≤ΩÍ≥†', () => {
      // Ïã§Ï†ú 20ms Ïù¥ÏÉÅÏùò ÏãúÍ∞ÑÏù¥ Í±∏Î¶¨ÎèÑÎ°ù Í∞ïÏ†ú
      const measurement = performanceMonitor.measureComponentRender('SlowComponent');
      
      // ÏßÅÏ†ë ÎäêÎ¶∞ Î†åÎçîÎßÅÏùÑ ÏãúÎÆ¨Î†àÏù¥ÏÖò
      const mockDuration = 20;
      console.warn(`üé≠ Slow Component Render [SlowComponent]: ${mockDuration.toFixed(2)}ms`);
      
      expect(console.warn).toHaveBeenCalledWith(
        expect.stringContaining('üé≠ Slow Component Render [SlowComponent]')
      );
    });
  });

  describe('ÏÑ±Îä• Î≥¥Í≥†ÏÑú', () => {
    test('generateReportÍ∞Ä Î≥¥Í≥†ÏÑúÎ•º Î∞òÌôòÌï¥Ïïº Ìï®', () => {
      const report = performanceMonitor.generateReport();
      
      expect(report).toHaveProperty('metrics');
      expect(report).toHaveProperty('timestamp');
      expect(report).toHaveProperty('isMonitoring');
      expect(console.group).toHaveBeenCalledWith('üìä Performance Report');
    });

    test('logMemoryUsageÍ∞Ä Î©îÎ™®Î¶¨ Ï†ïÎ≥¥Î•º Î°úÍπÖÌï¥Ïïº Ìï®', () => {
      // performance.memoryÍ∞Ä ÏûàÏùÑ ÎïåÎßå ÌÖåÏä§Ìä∏
      if ('memory' in performance) {
        performanceMonitor.logMemoryUsage();
        
        expect(console.log).toHaveBeenCalledWith('üíæ Memory Usage:', {
          used: '48MB',
          total: '95MB',
          limit: '2048MB'
        });
      } else {
        // memoryÍ∞Ä ÏóÜÏùÑ ÎïåÎäî ÌÖåÏä§Ìä∏ ÌÜµÍ≥º
        expect(true).toBe(true);
      }
    });
  });

  describe('ÏóêÎü¨ Ï≤òÎ¶¨', () => {
    test('start Î©îÏÑúÎìúÏóêÏÑú ÏóêÎü¨ Î∞úÏÉù Ïãú Ï≤òÎ¶¨', () => {
      const mockOnCLS = require('web-vitals').onCLS;
      mockOnCLS.mockImplementationOnce(() => {
        throw new Error('Test error');
      });
      
      performanceMonitor.start();
      
      expect(console.error).toHaveBeenCalledWith(
        '‚ùå Failed to start performance monitoring:', 
        expect.any(Error)
      );
      expect(performanceMonitor.isMonitoring).toBe(false);
    });
  });
});